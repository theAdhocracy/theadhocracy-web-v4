---
export const prerender = true;

import type { GetStaticPaths } from "astro";
import metadata from "@/data/metadata.json";

import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/utilities/dates";
import Discovery from "@/components/Discovery.astro";
import Resources from "@/components/Resources.astro";
import RelatedContent from "@/components/RelatedContent.astro";
import Conversation from "@/components/Conversation.astro";

// Generate static pages
export const getStaticPaths = (async () => {
	const articles = await fetch("https://cms.theadhocracy.co.uk/articles.json", {
		method: "GET",
		headers: {
			"content-type": "application/json",
			Authorization: `Bearer ${import.meta.env.CRAFT_API_KEY}`,
		},
	});
	const fetchedArticles = await articles.json();

	const journals = await fetch("https://cms.theadhocracy.co.uk/journals.json", {
		method: "GET",
		headers: {
			"content-type": "application/json",
			Authorization: `Bearer ${import.meta.env.CRAFT_API_KEY}`,
		},
	});
	const fetchedJournals = await journals.json();

	const response = fetchedArticles.data.concat(fetchedJournals.data);

	return response.map((item: any, index: number) => {
		return {
			params: {
				slug: item.slug,
			},
			props: {
				post: item,
				context: {
					next:
						index === 0 || item.type !== response[index - 1].type
							? null
							: {
									slug: response[index - 1].slug,
									title: response[index - 1].title,
									desc: response[index - 1].snippet,
								},
					prev:
						index === response.length - 1 ||
						item.type !== response[index + 1].type
							? null
							: {
									slug: response[index + 1].slug,
									title: response[index + 1].title,
									desc: response[index + 1].snippet,
								},
				},
			},
		};
	});
}) satisfies GetStaticPaths;

// Fetch & modify prop data
const { post, context } = Astro.props as any;

const body = post.body.replace(
	/<sup>\[([0-9]*)\]<\/sup>/gi,
	'<sup id="index$1"><a href="#footnote$1" title="Jump to footnote.">[$1]</a></sup>'
);

const resources = post.resources
	? post.resources[0].title
		? post.resources
		: false
	: false;

// Handle webmentions
// TODO: Return to this and refactor it!
const path = Astro.url.pathname;
const targetUrl = `https://theadhocracy.co.uk${path}`;

const wmData = await fetch(
	`https://webmention.io/api/mentions.jf2?target[]=${targetUrl}&target[]=${targetUrl}/`
);
const response = await wmData.json();

const webmentions = (response.name = "Webmentions"
	? response.children.map((mention: any) => {
			return {
				type: mention.type,
				author: mention.author,
				url: mention.url,
				published: mention.published,
				received: mention["wm-received"],
				id: mention["wm-received"],
				source: mention["wm-source"],
				target: mention["wm-target"],
				protocol: mention["wm-protocol"],
				summary: {
					type: mention.summary?.["content-type"],
					value: mention.summary?.value,
				},
				content: mention.content,
				bookmark: mention["bookmark-of"],
				reply: mention["in-reply-to"],
				like: mention["like-of"],
				repost: mention["repost-of"],
				mention: mention["mention-of"],
				rsvp: mention.rsvp,
				property: mention["wm-property"],
				private: mention["wm-private"],
				rels: mention.rels,
			};
		})
	: []);
---

<Layout
	title={post.title}
	meta={{
		desc: post.snippet,
		type: "article",
		category: post.silo,
		published: post.date,
		updated: post.updated,
		tags: post.tags,
	}}
>
	<main id="content" class="article h-entry">
		<header>
			<h1 class="article-header p-name">{post.title}</h1>
		</header>
		<article class="full-width">
			<ul class="article-details left-side">
				{
					post.updated && post.updated !== post.date ? (
						<>
							<li>Updated</li>
							<li>
								<time
									class="dt-updated"
									datetime={new Date(post.updated).toISOString()}
								>
									{formatDate(post.updated)}
								</time>
							</li>
						</>
					) : (
						""
					)
				}
				<li>Published</li>
				<li>
					<time
						class="dt-published"
						datetime={new Date(post.date).toISOString()}
					>
						{formatDate(post.date)}
					</time>
				</li>
				<li>Categories</li>
				<li>
					{
						post.categories.map(
							(category: string, index: number, array: any) =>
								index < array.length - 1 ? (
									<a
										href={`/search/?query=&filter=${category}`}
										class="p-category"
									>
										{category},
									</a>
								) : (
									<a
										href={`/search/?query=&filter=${category}`}
										class="p-category"
									>
										{category}
									</a>
								)
						)
					}
				</li>
				<li>Tags</li>
				<li>
					{
						post.tags.map((tag: string, index: number, array: any) =>
							index < array.length - 1 ? (
								<a href={`/search/?query=${tag}`} class="p-category">
									{tag},
								</a>
							) : (
								<a href={`/search/?query=${tag}`} class="p-category">
									{tag}
								</a>
							)
						)
					}
				</li>
			</ul>
			<div id="article-body" class="e-content" set:html={body} />
			<Discovery context={context} title="Articles" url="wrote" />
			{resources && <Resources resources={post.resources} />}
			<RelatedContent webmentions={webmentions} />
			<Conversation webmentions={webmentions} />
			<section class="footnotes">
				{post.footnotes.length >= 1 ? <h2>Footnotes</h2> : null}
				{
					post.footnotes.map((footnote: any, index: number) => {
						let position = index + 1;
						// Regex explanation: search for any </li> OR </p> that is NOT followed by any further instance of </li> or </p> i.e. find the last closing tag. The [^] tells it to ignore whitespace/linebreaks when searching ahead i.e. multi paragraph. The first OR is in brackets so that the rendered closing tag is of the correct sort i.e. $1
						return (
							<aside
								id={`footnote${position}`}
								set:html={footnote.replace(
									/<\/(li|p)>(?![^]*<\/(li|p)>)/im,
									' <a class="footnote-return" href="#index' +
										position +
										'" title="Return to previous location in article.">⬆️</a></$1>'
								)}
							/>
						);
					})
				}
			</section>
			<section class="microformats">
				<ul>
					<li class="p-summary">{post.snippet}</li>
					<li class="h-card">
						<a
							rel="author"
							class="p-name p-author u-url"
							href={metadata.siteUrl}
						>
							{metadata.author}
						</a>
						<img
							class="u-photo"
							src="https://cms.theadhocracy.co.uk/assets/theadhocracy/website/murray-headshot-square.jpg"
							alt="Murray Champernowne."
						/>
					</li>
				</ul>
				<a class="u-url" href={`${metadata.siteUrl}/wrote/${post.slug}`}>
					{post.type === "article" ? "Article" : "Journal"} permalink
				</a>
			</section>
		</article>
	</main>
</Layout>

<style is:global>
	/* Determine Grid Widths */
	:root {
		--main: 40rem;
		--aside: 20rem;
		--gutter: 10rem;
		--full-width: calc(var(--main) + (2 * var(--aside)) + (2 * var(--gutter)));
		--part-span: calc(var(--main) + var(--aside));
	}

	/* Width / Column Utility Classes */

	.full-width {
		max-width: var(--full-width);
		width: 100%;
	}

	.main-col {
		max-width: var(--main);
		width: 100%;
	}

	.right-side {
		float: right;
		max-width: var(--aside);
		width: 100%;
	}

	.left-side {
		float: left;
		max-width: var(--aside);
		width: 100%;
	}

	.part-span {
		max-width: var(--part-span);
		width: 100%;
	}

	/* Layout & Element Styling */

	#article-body {
		grid-column: 1 / -1;
	}

	main.article * {
		margin-left: auto;
		margin-right: auto;
	}

	.article p,
	.article h2,
	.article h3,
	.article h4,
	.article h5,
	.article h6,
	#article-body ul,
	#article-body ol,
	.footnotes ul,
	.footnotes ol {
		max-width: var(--main);
		line-height: 2;
	}

	.article h2 {
		background: linear-gradient(90deg, var(--blue), var(--lightblue));
		-webkit-text-fill-color: transparent;
		-webkit-background-clip: text;
		background-clip: text;
		color: var(--blue); /* fallback if gradients aren't supported */
	}

	.article h3 {
		background: linear-gradient(90deg, var(--green), var(--lightblue));
		-webkit-text-fill-color: transparent;
		-webkit-background-clip: text;
		background-clip: text;
		color: var(--green); /* fallback if gradients aren't supported */
	}

	.article code {
		padding: 0 0.2em;
		font-size: 1.05em;
		color: var(--orange);
		font-weight: bold;
	}

	.article pre {
		max-width: var(--part-span);
		padding: 1rem 3rem;
		overflow-x: auto;
		background-color: var(--darkgrey);
		border-left: 5px solid var(--orange);
		border-image: linear-gradient(180deg, var(--orange), var(--yellow)) 1;
		color: var(--yellow);
		line-height: 2.2;
		tab-size: 4;
		white-space: pre;
	}

	.article kbd {
		padding: 0.1em 0.3em 0;
		border: 1px solid var(--grey);
		border-radius: 6px;
		color: var(--green);
	}

	.article blockquote {
		position: relative;
		max-width: var(--part-span);
		padding: 2rem;
		font-size: 1.5rem;
		font-family: "Times New Roman", serif;
		line-height: 2;
		text-align: center;
		font-style: italic;
		quotes: "“" "”";
	}

	.article blockquote::before {
		content: open-quote;
		display: inline-block;
		transform: translateY(0.25rem);
		margin-right: 1.25rem;
		margin-left: -3rem; /* allows position to spill into gap for article details */
		font-size: 4rem;
		color: var(--orange);
		line-height: 0;
	}

	.article blockquote::after {
		content: close-quote;
		position: absolute;
		bottom: -2rem;
		right: 0;
		margin-left: 1.25rem;
		font-size: 4rem;
		color: var(--lightblue);
	}

	.article figure {
		display: flex;
		flex-wrap: wrap;
		align-items: flex-end;
		justify-content: center;
	}

	.article figure img {
		margin: 0 0 0 auto;
	}

	.article figure figcaption {
		max-width: 20rem;
		margin: 2rem auto 0 2rem;
		padding-left: 1rem;
		padding-bottom: 0.25rem;
		border-left: 3px solid var(--lightblue);
		font-size: 0.8rem;
		color: var(--lightblue);
	}

	.article del,
	.article del code {
		color: var(--grey);
	}

	.article a {
		color: var(--pink);
		text-underline-offset: 0.1em;
		text-decoration-thickness: 0.1em;
	}

	.article a:visited {
		color: var(--green);
	}

	.article a:not(.footnote-return):hover {
		font-style: italic;
		letter-spacing: 0.01em;
	}

	.article sup {
		scroll-margin-top: 3rem;
	}

	.article sup a:not(.footnote-return):hover {
		font-style: normal;
		color: var(--orange);
	}

	/* Article Details */

	.article-details {
		display: grid;
		grid-template-columns: 1fr;
		width: 100%;
		max-width: 100%;
		margin-top: 0;
		padding-left: 0;
		list-style: none;
		position: relative;
		z-index: 1; /* fixes overlap with blockquotes making links unclickable */
	}

	.article-details li {
		width: 100%;
		line-height: 2;
		color: var(--yellow);
	}

	.article-details li:nth-of-type(even) {
		color: var(--green);
	}

	.article-details li:nth-of-type(even) a {
		display: inline-block;
		margin-left: 0.25em;
		color: var(--grey);
		text-decoration: none;
	}

	/* Article Footnotes */

	.footnotes {
		counter-reset: footnote;
	}

	.footnotes > aside > *:first-child::before {
		counter-increment: footnote;
		content: "[" counter(footnote) "] ";
	}

	.footnote-return {
		text-decoration: none;
	}

	/* Mobile Breakpoints */

	@media screen and (min-width: 275px) {
		.article-details {
			grid-template-columns: minmax(5rem, 7rem) minmax(10rem, 1fr);
		}
	}

	/* Desktop */

	@media screen and (min-width: 599px) {
		.article-details {
			display: block;
			max-width: var(--aside);
			padding-left: 2.5rem;
			text-align: right;
		}

		.article-details li {
			width: auto;
			margin-right: 3rem;
		}
	}
</style>
