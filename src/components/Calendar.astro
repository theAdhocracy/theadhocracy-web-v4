---
let { month, year, entryArray } = Astro.props;

let monthLookup: { [key: string]: string } = {
	January: "01",
	February: "02",
	March: "03",
	April: "04",
	May: "05",
	June: "06",
	July: "07",
	August: "08",
	September: "09",
	October: "10",
	November: "11",
	December: "12",
};

// Create array of dates to be highlighted
let entryDates = entryArray.map((entry: any) => {
	return parseInt(entry.day);
});

// Invert entryArray so that entries are in date order
entryArray = entryArray.reverse();

// Works in two ways: months in JS start at 0, so passing in "April" returns "4", which gives you May. By setting day value to "0" it's equivalent to "1st of May - 1", so lets us get the month we expect's (i.e. April) last day and therefore the month length. For the first day, we specify day 1 on the month before to account for JS 0-indexing the month array.
let numDays = new Date(year, Number(monthLookup[month]), 0).getDate();
let firstDayOfMonth = new Date(
	year,
	Number(monthLookup[month]) - 1,
	1
).getDay();
// Creates offset to align with right day of the week; +6 accounts for Sunday being first day of the week in JS; -1 aligns with a 0-index i value
firstDayOfMonth === 0
	? (firstDayOfMonth = firstDayOfMonth + 6)
	: (firstDayOfMonth = firstDayOfMonth - 1);
numDays = numDays + firstDayOfMonth;

// Loop through and create calendar array
let calendarDays = [];

let dayNumeric = 1;
let entryNumber = 0;
for (let i = 0; i < numDays; i++) {
	if (i < firstDayOfMonth) {
		calendarDays.push({
			value: null,
		});
	} else if (entryDates.indexOf(dayNumeric) >= 0) {
		calendarDays.push({
			slug: entryArray[entryNumber].slug,
			value: dayNumeric < 10 ? "0" + dayNumeric : dayNumeric.toString(),
		});
		dayNumeric++;
		entryNumber++;
	} else {
		calendarDays.push({
			value: dayNumeric < 10 ? "0" + dayNumeric : dayNumeric.toString(),
		});
		dayNumeric++;
	}
}
---

<ul class="calendar-list">
	<li class="calendar-title">M</li>
	<li class="calendar-title">T</li>
	<li class="calendar-title">W</li>
	<li class="calendar-title">T</li>
	<li class="calendar-title">F</li>
	<li class="calendar-title">S</li>
	<li class="calendar-title">S</li>
	{
		calendarDays.map((day) => {
			if (!day.value) {
				return <li>&nbsp;</li>;
			} else if (day.slug) {
				return (
					<li class="calendar-entry">
						<a href={`/wrote/${day.slug}`}>{day.value}</a>
					</li>
				);
			} else {
				return <li>{day.value}</li>;
			}
		})
	}
</ul>

<style>
	.calendar-list {
		list-style: none;
		display: grid;
		grid-template-columns: repeat(7, 1fr);
		padding: 1em;
		margin: 0;
		gap: 0.5em;
		text-align: center;
	}

	.calendar-list li {
		color: var(--blue);
	}

	li.calendar-title {
		color: var(--pink);
	}

	li.calendar-entry a {
		position: relative;
		z-index: 1;
		text-decoration: none;
		color: #ffffff;
	}

	li.calendar-entry a::before {
		content: "";
		position: absolute;
		z-index: -1;
		display: block;
		height: 1.75rem;
		width: 1.75rem;
		background-color: var(--pink);
		border-radius: 50%;
		top: -0.13rem;
		left: -0.32rem;
	}

	li.calendar-entry a:hover::before {
		background-color: var(--orange);
	}
</style>
